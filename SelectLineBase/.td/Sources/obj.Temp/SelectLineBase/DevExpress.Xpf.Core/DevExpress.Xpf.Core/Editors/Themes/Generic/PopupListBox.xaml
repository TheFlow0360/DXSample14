<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxep="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxcore_unique_xmlns="http://schemas.devexpress.com/winfx/2008/xaml/core">

    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.SelectLineBase.v17.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <dxcore_unique_xmlns:StringEmptyToSpaceConverter x:Key="stringToSpaceConverter" />
    <dxcore_unique_xmlns:NegationConverter x:Key="negationConverter" />

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.ImagePresenter}" TargetType="{x:Type dxei:ImagePresenter}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;10;6" /><Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxei:ImagePresenter}">
                    <dxcore_unique_xmlns:DXImage x:Name="PART_Image" Stretch="None" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=RadioEmptyItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;20;6" /><Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;24;22">
                        <dxe:ListBoxRadioButton x:Name="radioButton" dxcore_unique_xmlns:FocusHelper2.Focusable="False" Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" IsHitTestVisible="True" Margin="3,0,3,0" Padding="0,2,0,2" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxe:ListBoxRadioButton.Content>
                                <ContentPresenter dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;27;34" />
                            </dxe:ListBoxRadioButton.Content>
                        </dxe:ListBoxRadioButton>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="radioButton" Value="0,0,3,0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditValue, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter Property="IsSelected" Value="True" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=SelectAllItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;53;6" /><Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="True" />
        <Setter Property="IsSelected" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.IsSelected, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;60;22">
                        <dxe:SelectAllItemCheckEdit x:Name="checkEdit" Padding="3,0,0,0" dxcore_unique_xmlns:FocusHelper2.Focusable="false" dxeh:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" EditValue="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.SelectAll, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" ShowBorder="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxe:SelectAllItemCheckEdit.Content>
                                <Binding Path="DisplayText" Converter="{StaticResource stringToSpaceConverter}" />
                            </dxe:SelectAllItemCheckEdit.Content>
                        </dxe:SelectAllItemCheckEdit>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="checkEdit" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=WaitIndicatorItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;76;6" /><Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="True" />
        <Setter Property="IsSelected" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dxcore_unique_xmlns:ColumnWaitIndicator />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=DefaultButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;88;6" /><Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=EmptyItemTemplate}">
        <Button Style="{DynamicResource {dxet:CustomItemThemeKey ResourceKey=DefaultButtonStyle}}" Content="{Binding Path=DisplayText}" Command="{Binding Path=Command}" CommandParameter="{Binding Path=Item}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;94;10">
        </Button>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=SeparatorTemplate}">
        <Separator dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;98;10" />
    </DataTemplate>
    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=DefaultTemplate}">
        <ContentPresenter Content="{Binding Path=DisplayText, Converter={StaticResource stringToSpaceConverter}}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;101;10" />
    </DataTemplate>
    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=DefaultItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;103;6" /><Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="Template" Value="{DynamicResource {dxet:EditorListBoxThemeKey ResourceKey=ItemTemplate}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=CheckBoxItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;120;6" /><Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;124;22">
                        <dxe:CheckEdit x:Name="checkEdit" HorizontalAlignment="Stretch" Padding="3,0,0,0" dxcore_unique_xmlns:FocusHelper2.Focusable="False" dxeh:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" ShowBorder="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="True" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;125;26">
                            <ContentPresenter dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;126;30" />
                        </dxe:CheckEdit>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="checkEdit" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=RadioButtonItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="dxcore_unique_xmlns:BlendHelper2.StyleInfo" Value="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;147;6" /><Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;151;22">
                        <dxe:ListBoxRadioButton Name="radioButton" dxcore_unique_xmlns:FocusHelper2.Focusable="False" Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" IsHitTestVisible="True" Margin="3,0,3,0" Padding="0,2,0,2" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxe:ListBoxRadioButton.Content>
                                <ContentPresenter dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;154;34" />
                            </dxe:ListBoxRadioButton.Content>
                        </dxe:ListBoxRadioButton>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="radioButton" Value="0,0,3,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate TargetType="{x:Type ScrollViewer}" x:Key="{dxet:EditorListBoxThemeKey ResourceKey=ScrollViewerTemplate}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;177;10">
            <Grid.Resources>
                <dxeh:ScrollContentPresenterMarginCorrector x:Key="ScrollContentPresenterMarginCorrector" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollContentPresenterMarginCorrector}}" x:Name="PART_ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanHorizontallyScroll="False" CanVerticallyScroll="False" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;189;14">
                <ScrollContentPresenter.CanContentScroll>
                    <Binding Path="CanContentScroll" RelativeSource="{RelativeSource TemplatedParent}" />
                </ScrollContentPresenter.CanContentScroll>
            </ScrollContentPresenter>
            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="VerticalScrollBar" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;194;14" />
            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="HorizontalScrollBar" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;195;14" />
            <dx:DXBorder x:Name="Corner" Grid.Row="1" Grid.Column="1" Style="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollingCornerStyle}}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;196;14" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=Template}" TargetType="{x:Type dxep:EditorListBox}">
        <dx:DXBorder x:Name="Bd" Background="{TemplateBinding Background}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;200;10">
            <Grid dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;201;14">
                <ScrollViewer x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" dxcore_unique_xmlns:FocusHelper2.Focusable="False" BorderThickness="0" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;202;18">
                    <ItemsPresenter dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;203;22" />
                    <dxcore_unique_xmlns:ScrollBarExtensions.AllowMouseScrolling>
                        <system:Boolean>true</system:Boolean>
                    </dxcore_unique_xmlns:ScrollBarExtensions.AllowMouseScrolling>
                </ScrollViewer>
                <dxcore_unique_xmlns:WaitIndicator DeferedVisibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ShowWaitIndicator, RelativeSource={RelativeSource Self}}" dxcore_unique_xmlns:BlendHelper2.ThemeInfo="DevExpress.Xpf.Core\DevExpress.Xpf.Core\Editors\Themes\Generic\PopupListBox.xaml;208;18" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
</ResourceDictionary>